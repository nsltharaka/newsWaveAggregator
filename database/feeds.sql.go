// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO
    feeds (id, created_at, url)
VALUES ($1, $2, $3)
RETURNING
    id, created_at, updated_at, url
`

type CreateFeedParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Url       string    `json:"url"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.ID, arg.CreatedAt, arg.Url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const getAllFeedsForUser = `-- name: GetAllFeedsForUser :many
SELECT f.id, f.created_at, f.updated_at, f.url
FROM
    feeds f
    INNER JOIN topic_contains_feed tcf ON f.id = tcf.feed_id
    INNER JOIN user_follows_topic uft ON uft.topic_id = tcf.topic_id
WHERE
    uft.user_id = $1
`

func (q *Queries) GetAllFeedsForUser(ctx context.Context, userID int32) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFeedsGroupedByTopic = `-- name: GetAllFeedsGroupedByTopic :many
SELECT t.name AS topic_name, f.url
FROM
    Topics t
    INNER JOIN topic_contains_feed tcf ON t.id = tcf.topic_id
    INNER JOIN feeds f ON tcf.feed_id = f.id
WHERE
    tcf.user_id = $1
GROUP BY
    t.name,
    f.url
ORDER BY t.name
`

type GetAllFeedsGroupedByTopicRow struct {
	TopicName string `json:"topic_name"`
	Url       string `json:"url"`
}

func (q *Queries) GetAllFeedsGroupedByTopic(ctx context.Context, userID int32) ([]GetAllFeedsGroupedByTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedsGroupedByTopic, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedsGroupedByTopicRow
	for rows.Next() {
		var i GetAllFeedsGroupedByTopicRow
		if err := rows.Scan(&i.TopicName, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, url FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const getFeedsForUserTopic = `-- name: GetFeedsForUserTopic :many
SELECT f.id, f.url
FROM
    feeds f
    INNER JOIN topic_contains_feed tcf ON tcf.feed_id = f.id
WHERE
    tcf.topic_id = $1
    AND tcf.user_id = $2
`

type GetFeedsForUserTopicParams struct {
	TopicID uuid.UUID `json:"topic_id"`
	UserID  int32     `json:"user_id"`
}

type GetFeedsForUserTopicRow struct {
	ID  uuid.UUID `json:"id"`
	Url string    `json:"url"`
}

func (q *Queries) GetFeedsForUserTopic(ctx context.Context, arg GetFeedsForUserTopicParams) ([]GetFeedsForUserTopicRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUserTopic, arg.TopicID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForUserTopicRow
	for rows.Next() {
		var i GetFeedsForUserTopicRow
		if err := rows.Scan(&i.ID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedsToFetch = `-- name: GetNextFeedsToFetch :many
select id, created_at, updated_at, url from feeds order by updated_at asc nulls first limit $1
`

func (q *Queries) GetNextFeedsToFetch(ctx context.Context, limit int32) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedAsFetched = `-- name: MarkFeedAsFetched :exec
UPDATE feeds SET updated_at = now() WHERE id = $1
`

func (q *Queries) MarkFeedAsFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedAsFetched, id)
	return err
}
