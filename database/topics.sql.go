// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: topics.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO
    topics (
        id,
        name,
        img_url,
        created_by,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, name, img_url, updated_at, created_by
`

type CreateTopicParams struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	ImgUrl    sql.NullString `json:"img_url"`
	CreatedBy int32          `json:"created_by"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, createTopic,
		arg.ID,
		arg.Name,
		arg.ImgUrl,
		arg.CreatedBy,
		arg.UpdatedAt,
	)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAllTopicsForUserWithSourceCount = `-- name: GetAllTopicsForUserWithSourceCount :many
SELECT t.id, t.name, t.img_url, t.updated_at, t.created_by, COUNT(DISTINCT tcf.feed_id) AS feed_count
FROM
    Topics t
    INNER JOIN User_Follows_Topic uft ON t.id = uft.topic_id
    LEFT JOIN Topic_Contains_Feed tcf ON t.id = tcf.topic_id
    AND uft.user_id = tcf.user_id -- Use LEFT JOIN for optional matching
WHERE
    uft.user_id = $1
GROUP BY
    t.id
ORDER BY t.updated_at DESC
`

type GetAllTopicsForUserWithSourceCountRow struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	ImgUrl    sql.NullString `json:"img_url"`
	UpdatedAt time.Time      `json:"updated_at"`
	CreatedBy int32          `json:"created_by"`
	FeedCount int64          `json:"feed_count"`
}

func (q *Queries) GetAllTopicsForUserWithSourceCount(ctx context.Context, userID int32) ([]GetAllTopicsForUserWithSourceCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTopicsForUserWithSourceCount, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTopicsForUserWithSourceCountRow
	for rows.Next() {
		var i GetAllTopicsForUserWithSourceCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.FeedCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopic = `-- name: GetTopic :one
SELECT id, name, img_url, updated_at, created_by FROM topics WHERE id = $1
`

func (q *Queries) GetTopic(ctx context.Context, id uuid.UUID) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopic, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getTopicByName = `-- name: GetTopicByName :one
SELECT id, name, img_url, updated_at, created_by FROM topics WHERE name = $1
`

func (q *Queries) GetTopicByName(ctx context.Context, name string) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopicByName, name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getTopicsCount = `-- name: GetTopicsCount :one
SELECT COUNT(*) AS total_topics
FROM
    user_follows_topic uft
    INNER JOIN topics t ON uft.topic_id = t.id
WHERE
    uft.user_id = $1
`

func (q *Queries) GetTopicsCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTopicsCount, userID)
	var total_topics int64
	err := row.Scan(&total_topics)
	return total_topics, err
}

const updateTopicImage = `-- name: UpdateTopicImage :one
UPDATE topics SET img_url = $1 WHERE name = $2 RETURNING id, name, img_url, updated_at, created_by
`

type UpdateTopicImageParams struct {
	ImgUrl sql.NullString `json:"img_url"`
	Name   string         `json:"name"`
}

func (q *Queries) UpdateTopicImage(ctx context.Context, arg UpdateTopicImageParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, updateTopicImage, arg.ImgUrl, arg.Name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}
