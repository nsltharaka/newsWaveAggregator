// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: topics.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (id, name, img_url, created_by, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, img_url, updated_at, created_by
`

type CreateTopicParams struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	ImgUrl    sql.NullString `json:"img_url"`
	CreatedBy int32          `json:"created_by"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, createTopic,
		arg.ID,
		arg.Name,
		arg.ImgUrl,
		arg.CreatedBy,
		arg.UpdatedAt,
	)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getTopicByName = `-- name: GetTopicByName :one
SELECT id, name, img_url, updated_at, created_by
FROM topics
WHERE name = $1
`

func (q *Queries) GetTopicByName(ctx context.Context, name string) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopicByName, name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const updateTopicImage = `-- name: UpdateTopicImage :one
UPDATE topics SET img_url = $1 WHERE name = $2 RETURNING id, name, img_url, updated_at, created_by
`

type UpdateTopicImageParams struct {
	ImgUrl sql.NullString `json:"img_url"`
	Name   string         `json:"name"`
}

func (q *Queries) UpdateTopicImage(ctx context.Context, arg UpdateTopicImageParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, updateTopicImage, arg.ImgUrl, arg.Name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}
