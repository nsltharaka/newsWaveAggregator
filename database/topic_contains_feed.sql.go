// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: topic_contains_feed.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTopicContainsFeed = `-- name: CreateTopicContainsFeed :one
INSERT INTO topic_contains_feed(topic_id, feed_id, user_id)
VALUES($1, $2, $3)
RETURNING topic_id, feed_id, user_id
`

type CreateTopicContainsFeedParams struct {
	TopicID uuid.UUID `json:"topic_id"`
	FeedID  uuid.UUID `json:"feed_id"`
	UserID  int32     `json:"user_id"`
}

func (q *Queries) CreateTopicContainsFeed(ctx context.Context, arg CreateTopicContainsFeedParams) (TopicContainsFeed, error) {
	row := q.db.QueryRowContext(ctx, createTopicContainsFeed, arg.TopicID, arg.FeedID, arg.UserID)
	var i TopicContainsFeed
	err := row.Scan(&i.TopicID, &i.FeedID, &i.UserID)
	return i, err
}

const getTopicContainsFeed = `-- name: GetTopicContainsFeed :one
SELECT topic_id, feed_id, user_id
FROM topic_contains_feed
WHERE feed_id = $1
    AND topic_id = $2
`

type GetTopicContainsFeedParams struct {
	FeedID  uuid.UUID `json:"feed_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) GetTopicContainsFeed(ctx context.Context, arg GetTopicContainsFeedParams) (TopicContainsFeed, error) {
	row := q.db.QueryRowContext(ctx, getTopicContainsFeed, arg.FeedID, arg.TopicID)
	var i TopicContainsFeed
	err := row.Scan(&i.TopicID, &i.FeedID, &i.UserID)
	return i, err
}
