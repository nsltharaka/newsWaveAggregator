// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_topics.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUserTopic = `-- name: CreateUserTopic :one
INSERT INTO user_topic(id, user_id, topic_id)
values ($1, $2, $3)
RETURNING id, user_id, topic_id
`

type CreateUserTopicParams struct {
	ID      uuid.UUID `json:"id"`
	UserID  int32     `json:"user_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) CreateUserTopic(ctx context.Context, arg CreateUserTopicParams) (UserTopic, error) {
	row := q.db.QueryRowContext(ctx, createUserTopic, arg.ID, arg.UserID, arg.TopicID)
	var i UserTopic
	err := row.Scan(&i.ID, &i.UserID, &i.TopicID)
	return i, err
}

const deleteUserTopic = `-- name: DeleteUserTopic :one
delete from user_topic
WHERE user_id = $1
    and topic_id = $2
RETURNING id, user_id, topic_id
`

type DeleteUserTopicParams struct {
	UserID  int32     `json:"user_id"`
	TopicID uuid.UUID `json:"topic_id"`
}

func (q *Queries) DeleteUserTopic(ctx context.Context, arg DeleteUserTopicParams) (UserTopic, error) {
	row := q.db.QueryRowContext(ctx, deleteUserTopic, arg.UserID, arg.TopicID)
	var i UserTopic
	err := row.Scan(&i.ID, &i.UserID, &i.TopicID)
	return i, err
}
