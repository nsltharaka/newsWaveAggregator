// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: forgot_password.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPasswordResetCase = `-- name: CreatePasswordResetCase :one
INSERT INTO
    forgot_password (case_number, code, user_id)
VALUES ($1, $2, $3)
RETURNING
    case_number, code, user_id
`

type CreatePasswordResetCaseParams struct {
	CaseNumber uuid.UUID `json:"case_number"`
	Code       string    `json:"code"`
	UserID     int32     `json:"user_id"`
}

func (q *Queries) CreatePasswordResetCase(ctx context.Context, arg CreatePasswordResetCaseParams) (ForgotPassword, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetCase, arg.CaseNumber, arg.Code, arg.UserID)
	var i ForgotPassword
	err := row.Scan(&i.CaseNumber, &i.Code, &i.UserID)
	return i, err
}

const deleteCase = `-- name: DeleteCase :exec
DELETE FROM forgot_password WHERE case_number = $1
`

func (q *Queries) DeleteCase(ctx context.Context, caseNumber uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCase, caseNumber)
	return err
}

const getCaseByNumber = `-- name: GetCaseByNumber :one
SELECT case_number, code, user_id FROM forgot_password WHERE case_number = $1
`

func (q *Queries) GetCaseByNumber(ctx context.Context, caseNumber uuid.UUID) (ForgotPassword, error) {
	row := q.db.QueryRowContext(ctx, getCaseByNumber, caseNumber)
	var i ForgotPassword
	err := row.Scan(&i.CaseNumber, &i.Code, &i.UserID)
	return i, err
}

const getCaseForUser = `-- name: GetCaseForUser :one
SELECT case_number, code, user_id FROM forgot_password WHERE user_id = $1
`

func (q *Queries) GetCaseForUser(ctx context.Context, userID int32) (ForgotPassword, error) {
	row := q.db.QueryRowContext(ctx, getCaseForUser, userID)
	var i ForgotPassword
	err := row.Scan(&i.CaseNumber, &i.Code, &i.UserID)
	return i, err
}

const updateCode = `-- name: UpdateCode :exec
UPDATE forgot_password SET code = $1 WHERE case_number = $2
`

type UpdateCodeParams struct {
	Code       string    `json:"code"`
	CaseNumber uuid.UUID `json:"case_number"`
}

func (q *Queries) UpdateCode(ctx context.Context, arg UpdateCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateCode, arg.Code, arg.CaseNumber)
	return err
}
